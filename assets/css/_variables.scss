@use 'sass:math';

$type-scales: (
  minor-second: 1.067,
  major-second: 1.125,
  minor-third: 1.2,
  major-third: 1.25,
  perfect-fourth: 1.333,
  augmented-fourth: 1.414,
  perfect-fifth: 1.5,
  golden-ratio: 1.618,
  major-sixth: 1.667,
  minor-seventh: 1.778,
  major-seventh: 1.875,
  octave: 2,
);

$font-base: 1rem;
$font-min-size: 18;
$font-max-size: 20;
$type-scale-sm: map-get(
  $map: $type-scales,
  $key: minor-third,
);
$type-scale-lg: map-get(
  $map: $type-scales,
  $key: augmented-fourth,
);
$fluid-min-width: 320;
$fluid-max-width: 1240;

/* font-size: clamp(min-font, v*x + r , max-font) */

$type-steps: (-2, -1, 0, 1, 2, 3, 4, 5);
$space-steps: (
  3xs: (
    min: 0.25,
    max: 0.25,
  ),
  2xs: (
    min: 0.5,
    max: 0.5,
  ),
  xs: (
    min: 0.75,
    max: 0.75,
  ),
  s: (
    min: 1,
    max: 1,
  ),
  m: (
    min: 1.5,
    max: 1.5,
  ),
  L: (
    min: 2,
    max: 2,
  ),
  xl: (
    min: 3,
    max: 3,
  ),
  2xl: (
    min: 4,
    max: 4,
  ),
  3xl: (
    min: 6,
    max: 6,
  ),
  's-l': (
    min: 1,
    max: 2,
  ),
  '3xs-3xl': (
    min: 0.25,
    max: 6,
  ),
);

@function get-slope($step) {
  $slope: 100 *
    math.div(
      $font-max-size * math.pow($type-scale-lg, $step) - $font-min-size *
        math.pow($type-scale-sm, $step),
      $fluid-max-width - $fluid-min-width
    ) * 1vw;
  @return $slope;
}

@function get-intercept($step) {
  $intercept: (
      math.div(
        $font-min-size * $fluid-max-width * math.pow($type-scale-sm, $step) -
          $font-max-size * $fluid-min-width * math.pow($type-scale-lg, $step),
        $fluid-max-width - $fluid-min-width
      )
    ) * math.div(1, 16) * 1rem;
  @return $intercept;
}

/* @debug math.pow(10, 2); */

:root {
  @each $step in $type-steps {
    --step-#{$step}: clamp(
      #{$font-min-size *
        math.pow($type-scale-sm, $step) *
        math.div(1, 16) *
        1rem},
      calc(#{get-slope($step)} + #{get-intercept($step)}),
      #{$font-max-size *
        math.pow($type-scale-lg, $step) *
        math.div(1, 16) *
        1rem}
    );
  }

  @each $step, $range in $space-steps {
    --space-#{$step}: clamp(
      #{map-get($map: $range, $key: min) *
        $font-min-size *
        math.div(1, 16) *
        1rem},
      calc(
        #{100 *
          (
            math.div(
              $font-max-size *
                map-get($map: $range, $key: max) -
                $font-min-size *
                map-get($map: $range, $key: min),
              $fluid-max-width - $fluid-min-width
            )
          ) *
          1vw} +
          #{math.div(
            $font-min-size *
              $fluid-max-width *
              map-get($map: $range, $key: min) -
              $font-max-size *
              $fluid-min-width *
              map-get($map: $range, $key: max),
            $fluid-max-width - $fluid-min-width
          ) *
          math.div(1, 16) *
          1rem},
        #{map-get($map: $range, $key: max) *
          $font-max-size *
          math.div(1, 16) *
          1rem}
      )
    );
  }
}

h1 {
  font-size: var(--step-5);
}
